daemon off;

error_log /dev/stdout info;

user nginx;

events {
  worker_connections 1024;
}

rtmp {
  server {
    listen ${STREAM_PORT};

    chunk_size 4000;
    notify_method get;

    application live {
      live on;
      # exec /usr/local/bin/ffmpeg -analyzeduration 10M -i rtmp://127.0.0.1/live/$name -strict -2 -c:a aac -mapping_family 255 -f dash -min_seg_duration 4000 -use_template 1 -use_timeline 0 -init_seg_name init-\$RepresentationID\$.mp4 -media_seg_name test-\$RepresentationID\$-\$Number\$.mp4 /opt/data/dash/$name.mpd 2>>/tmp/nginx_rtmp_ffmpeg_log;
      exec /usr/local/bin/ffmpeg -analyzeduration 10M -i rtmp://127.0.0.1/live/$name -strict -2 -c:a aac -mapping_family 255 -f dash /opt/data/dash/$name.mpd 2>>/tmp/nginx_rtmp_ffmpeg_log;
      # exec /usr/local/bin/ffmpeg -y -stream_loop -1 -i /share/sound/$name -af "channelmap=channel_layout=hexadecagonal" -c:a aac -ac 2 -b:a 2048k -f dash /opt/data/dash/$name.mpd 2>>/tmp/nginx_rtmp_ffmpeg_log;
    }
  }
}

http {
  lua_package_path "/usr/local/luajit/lib/lua/?.lua;;";

  init_by_lua_block {
    require "resty.core"
    collectgarbage("collect")  -- just to collect any garbage
  }

  server {
    access_log /dev/stdout combined;

    listen ${HTTP_PORT};

    # server_name m1-stream.local;

    # add_header 'Access-Control-Allow-Origin' '*';
    # add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
    # add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
    # add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
    #
    # location / {
    #   if ($request_method = 'OPTIONS') {
    #     add_header 'Access-Control-Allow-Origin' '*';
    #     add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
    #     #
    #     # Custom headers and headers various browsers *should* be OK with but aren't
    #     #
    #     add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
    #     #
    #     # Tell client that this pre-flight info is valid for 20 days
    #     #
    #     add_header 'Access-Control-Max-Age' 1728000;
    #     add_header 'Content-Type' 'text/plain; charset=utf-8';
    #     add_header 'Content-Length' 0;
    #     return 204;
    #   }
    #   if ($request_method = 'POST') {
    #     add_header 'Access-Control-Allow-Origin' '*';
    #     add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
    #     add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
    #     add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
    #   }
    #   if ($request_method = 'GET') {
    #     add_header 'Access-Control-Allow-Origin' '*';
    #     add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
    #     add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
    #     add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
    #   }
    # }

    location = / {
      return 200 'Nginx server started';
    }

    location /play {
      add_header Cache-Control no-cache;
      add_header Access-Control-Allow-Origin *;
      add_header Access-Control-Expose-Headers Content-Length;

      content_by_lua_block {
        if ngx.var.arg_sound == nil then
          command = "/share/sound/switcher.sh"
        else
          command = "/share/sound/switcher.sh "..ngx.var.arg_sound
        end
        local handle = io.popen(command)
      }
    }

    location /dash {
      types {
        application/dash+xml mpd;
        video/mp4 mp4;
      }
      root /opt/data;

      add_header Cache-Control no-cache;
      add_header Access-Control-Allow-Origin *;
      add_header Access-Control-Expose-Headers Content-Length;
    }
  }
}
